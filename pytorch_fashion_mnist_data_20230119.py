# -*- coding: utf-8 -*-
"""Pytorch_Fashion_MNIST_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nkAZaX5QQhnO3XN3FE27jW3JKk0tcPd_

# **İmage Recognition using Pytorch with Fashion MNIST DataSet** 

The Fashion MNIST Datasets contain a set of  28x28 grayscale images of clotes. Our goal is building a neural network using Pytorch and then training the network to predict clothes.
*italicized text*
"""

# https://medium.com/@aaysbt/fashion-mnist-data-training-using-pytorch-7f6ad71e96f4
# https://colab.research.google.com/drive/1nkAZaX5QQhnO3XN3FE27jW3JKk0tcPd_?usp=sharing

# importing required libraries..
import torch
import numpy as np
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torchvision import datasets, transforms
from torch.utils.data.sampler import SubsetRandomSampler  # for validation test

"""# **Load and Visualize the Data**"""

# Define a transform to convert to images to tensor and normalize
transform = transforms.Compose([transforms.ToTensor(),
                                transforms.Normalize((0.5,), (0.5,), )])  # mean and std have to be sequences (e.g., tuples),
# therefore we should add a comma after the values

# Load the data: train and test sets
trainset = datasets.FashionMNIST('~/.pytorch/F_MNIST_data', download=True, train=True, transform=transform)
testset = datasets.FashionMNIST('~/.pytorch/F_MNIST_data', download=True, train=False, transform=transform)

# Preparing for validaion test
indices = list(range(len(trainset)))
np.random.shuffle(indices)
# to get 20% of the train set
split = int(np.floor(0.2 * len(trainset)))
train_sample = SubsetRandomSampler(indices[:split])
valid_sample = SubsetRandomSampler(indices[split:])

# Data Loader
trainloader = torch.utils.data.DataLoader(trainset, sampler=train_sample, batch_size=64)
# len(trainloader) = 188, (12000/64=187.5)
validloader = torch.utils.data.DataLoader(trainset, sampler=valid_sample, batch_size=64)
# len(validloader) = 750, (48000/64=750)
testloader = torch.utils.data.DataLoader(testset, batch_size=64, shuffle=True)
# len(testloader) = 157, (10000/64=156.25)

print(trainset)

"""# **Visualize a Batch of Training Data**"""
print(trainloader)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt

# %matplotlib inline

dataiter = iter(trainloader)
print(dataiter)
# images, labels = dataiter.next()
images, labels = next(dataiter)  # https://discuss.pytorch.org/t/dataloader-has-no-attribute-dataset/146623/3

fig = plt.figure(figsize=(15, 5))
for idx in np.arange(20):
    # xticks=[], yticks=[] is empty to print the images without any ticks around them
    # np.sqeeze : Remove single-dimensional entries from the shape of an array.
    ax = fig.add_subplot(4, 20 / 4, idx + 1, xticks=[], yticks=[])
    ax.imshow(np.squeeze(images[idx]), cmap='gray')
    # .item() gets the value contained in a Tensor
    ax.set_title(labels[idx].item())
    fig.tight_layout()

"""# **Building the Network**"""
class Classifier(nn.Module):
    def __init__(self):
        super().__init__()
        self.fc1 = nn.Linear(784, 120)
        self.fc2 = nn.Linear(120, 120)
        self.fc3 = nn.Linear(120, 10)
        # self.fc4 = nn.Linear(64,10)
        # defining the 20% dropout
        self.dropout = nn.Dropout(0.2)
        a1 = 1

    def forward(self, x):
        x = x.view(x.shape[0], -1)
        x = self.dropout(F.relu(self.fc1(x)))
        x = self.dropout(F.relu(self.fc2(x)))
        # x = self.dropout(F.relu(self.fc3(x)))
        # not using dropout on output layer
        x = F.log_softmax(self.fc3(x), dim=1)
        return x

model = Classifier()
# defining the loss function
criterion = nn.NLLLoss()  # Defined the criterion with Negative log-likelihood loss
# https://medium.com/@aaysbt/fashion-mnist-data-training-using-pytorch-7f6ad71e96f4
list_model_parameters = list(model.parameters())
optimizer = optim.SGD(model.parameters(), lr=0.01)
# defined our optimizer (SGD)to optimize our model’s parameter when we loop through the dataset using epochs.
# https://medium.com/@aaysbt/fashion-mnist-data-training-using-pytorch-7f6ad71e96f4

valid_loss_min = np.Inf  # using this high value to make sure the update the weight first time
# epochs = 40
epochs = 3
steps = 0
model.train()  # prep model for training
# model.train()은 모델을 교육하고 있음을 모델에 알립니다.
# 이는 교육 및 평가 중에 다르게 동작하도록 설계된 Dropout 및 BatchNorm과 같은 레이어에 정보를 제공하는 데 도움이 됩니다.
# 예를 들어 train 모드에서 BatchNorm은 각각의 새 배치에서 이동 평균을 업데이트합니다.
# 반면 test 모드의 경우 BatchNorm은 이러한 업데이트가 중지됩니다.
# model.train()은 training중임을 알리는 것이고, model.eval() 또는 model.train(mode=False)를 호출하여 테스트 중임을 알립니다.
# https://stackoverflow.com/a/51433411/18525539

train_losses, valid_losses = [], []
for e in range(epochs):
    running_loss = 0
    valid_loss = 0
    # train the model #
    for images, labels in trainloader:
        optimizer.zero_grad()  # Clear the gradients of all optimized variables
        # optimizer.zero_grad()를 호출하여 모델 매개변수의 변화도를 재설정합니다.
        # 기본적으로 변화도는 더해지기(add up) 때문에 중복 계산을 막기 위해 반복할 때마다 명시적으로 0으로 설정합니다.
        # Backward pass: compute gradient of the loss with respect to all the learnable parameters
        log_ps = model(images)  # Make a forward pass through the network to getting log probabilities bypassing the images to the model.
        loss = criterion(log_ps, labels)  # Use the log probabilities (log_ps) and labels to calculate the loss.
        loss.backward()  # loss함수에서 모든 변수에 대해 미분을 계산한다.
        # Perform a backward pass through the network to calculate the gradients for model parameters.
        optimizer.step()  # 역전파 단계에서 수집된 gradients로 매개변수를 업데이트 한다
        # Take a step with the optimizer to update the model parameters.
        a1 = loss.item()
        a2 = images.size(0)
        a3 = loss.item() * images.size(0)
        running_loss += loss.item() * images.size(0)

    for images, labels in validloader:
        log_ps = model(images)
        loss = criterion(log_ps, labels)
        a1 = loss.item()
        a2 = images.size(0)
        a3 = loss.item() * images.size(0)
        valid_loss += loss.item() * images.size(0)

    a1 = len(trainloader.sampler)
    a2 = len(validloader.sampler)
    running_loss = running_loss / len(trainloader.sampler)
    valid_loss = valid_loss / len(validloader.sampler)
    train_losses.append(running_loss)
    valid_losses.append(valid_loss)

    print('Epoch: {} \tTraining Loss: {:.6f} \tValidation Loss: {:.6f}'.format(
        e + 1,
        running_loss,
        valid_loss
    ))
    if valid_loss <= valid_loss_min:
        print('validation loss decreased({:.6f} -->{:.6f}). Saving Model ...'.format(valid_loss_min, valid_loss))
        torch.save(model.state_dict(), 'model.pt')
        valid_loss_min = valid_loss

plt.plot(train_losses, label='Train Loss')
plt.plot(valid_losses, label='Valid Loss')

plt.legend()

"""# **Load the Model with the Lowest Validation Loss**"""
model.load_state_dict(torch.load('model.pt'))

"""# **Test The Train Network**"""
# track the test loss
test_loss = 0
class_correct = list(0. for i in range(10))
class_total = list(0. for i in range(10))

model.eval()
# model.train()은 training중임을 알리는 것이고, model.eval() 또는 model.train(mode=False)를 호출하여 테스트 중임을 알립니다.
# model.train()은 모델을 교육하고 있음을 모델에 알립니다.
# 이는 교육 및 평가 중에 다르게 동작하도록 설계된 Dropout 및 BatchNorm과 같은 레이어에 정보를 제공하는 데 도움이 됩니다.
# 예를 들어 train 모드에서 BatchNorm은 각각의 새 배치에서 이동 평균을 업데이트합니다.
# 반면 test 모드의 경우 BatchNorm은 이러한 업데이트가 중지됩니다.
# https://stackoverflow.com/a/51433411/18525539
for images, labels in testloader:
    # forword pass
    output = model(images)
    # calculate the loss
    loss = criterion(output, labels)
    # update the test loss
    a1 = loss.item()
    a2 = images.size(0)
    a3 = loss.item() * images.size(0)
    test_loss += loss.item() * images.size(0)
    # convert output probabilities to predicted class
    _, pred = torch.max(output, 1)
    # compare predictions to the true labes
    a4 = labels.data.view_as(pred)
    a5 = pred.eq(labels.data.view_as(pred))
    correct = np.squeeze(pred.eq(labels.data.view_as(pred)))
    # tensor.view(other.size())는 tensor를 other.size()의 크기로 만들어 리턴해주고,
    # tensor.view_as(other)는 tensor를 other라는 텐서와 같은 크기로 만들어 리턴해준다.
    # https://stackoverflow.com/questions/55403843/what-is-the-difference-between-view-and-view-as-in-pytorch
    # https://pytorch.org/docs/stable/generated/torch.Tensor.view_as.html
    # aa.eq(bb)는 aa라는 텐서와 bb라는 텐서의 요소별 같은지 다른지 true, false로 리턴해준다.
    # Computes element-wise equality
    # https://pytorch.org/docs/stable/generated/torch.eq.html

    # calculate test accuracy for each object class
    for i in range(len(labels)):
        label = labels.data[i]
        b1 = correct[i].item()
        class_correct[label] += correct[i].item()
        class_total[label] += 1

# calcaulate and prınt test loss
a1 = len(testloader.sampler)
test_loss = test_loss / len(testloader.sampler)
print('Test Loss: {:.6f}\n'.format(test_loss))

for i in range(10):
    if class_total[i] > 0:
        print('Test Accuracy of %5s: %2d%% (%2d/%2d)' %
              (str(i), 100 * class_correct[i] / class_total[i],
               np.sum(class_correct[i]), np.sum(class_total[i])))
    else:
        #print('Test Accuracy of %5s: N/A(no training examples)' % classes[i])
        print('Test Accuracy of %5s: N/A(no training examples)' % str(i))

print('\nTest Accuracy (Overall): %2d%% (%2d/%2d)' % (
    100. * np.sum(class_correct) / np.sum(class_total),
    np.sum(class_correct), np.sum(class_total)))

"""* 0: T-shirt/Top
* 1: Trouser
* 2: PullOver
* 3: Dress
* 4: Coat
* 5: Sandal
* 6: Shirt
* 7: Sneaker
* 8: Bag
* 9: Ankle Bot
"""

# obtain one batch of test images
dataiter = iter(testloader)
# images, labels = dataiter.next()
images, labels = next(dataiter)  # https://discuss.pytorch.org/t/dataloader-has-no-attribute-dataset/146623/3

# get sample outputs
output = model(images)
# convert output probabilities to predicted class
_, preds = torch.max(output, 1)
# prep images for display
images = images.numpy()

# plot the images in the batch, along with predicted and true labels
fig = plt.figure(figsize=(25, 4))
for idx in np.arange(20):
    ax = fig.add_subplot(2, 20 / 2, idx + 1, xticks=[], yticks=[])
    ax.imshow(np.squeeze(images[idx]), cmap='gray')
    ax.set_title("{} ({})".format(str(preds[idx].item()), str(labels[idx].item())),
                 color=("green" if preds[idx] == labels[idx] else "red"))






























